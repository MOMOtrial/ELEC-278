#include <stdio.h>

// Pointer --> "being pointed to
int *number_pointer;

// refer to "box number" (address) of a variable
int number = 0;
number_pointer = &number;


// describe a singly linked list (of ints)
// Null  for empty list
typedef struct list_node *list;

struct list_node {
    int value;
    list tail;
};

list numbers;


// how to compute length of list
size_t list_length(list nums) {
    size_t length = 0;              // can use int instead of size_t --> mean non negative nums
    while (nums != NULL) {
        length++;
        nums = nums->tail;
    }
    return length;
}

// constructing a list
int main() {
    struct list_node node_c = {
            .value = 3,
            .tail = NULL,
    };
    struct list_node node_b = {
            .value = 2,
            .tail = &node_c,
    };
    struct list_node node_a = {
            .value = 1,
            .tail = &node_b,
    };
    list numbers = &node_a;

    printf("Length: %d\n", list_length(numbers));
    return 0;
}
// APPEND AND ELEMENT TO A LIST
// Appends a number to end of list
void append(list *nums, int num) {
    // Construct a new node to go at end of list
    struct list_node new_node = {
            .value = num,
            .tail = NULL,
    };
    // Traverse the list until we get to the end.
    while (*nums != NULL)
        nums = &(*nums)->tail;
    // 'nums now points to the last 'tail' slot, where we need to put pointer to new node

    *nums = &new_node;
}

// works 

struct list_node {
    int value;
    struct list_node* tail;
};

typedef struct list_node* list;

// Function to calculate the length of the list
int list_length(list nums) {
    int length = 0;
    while (nums != NULL) {
        length++;
        nums = nums->tail;
    }
    return length;
}

// Function to append an element to the end of the list
void append(list *nums, int num) {
    // Construct a new node to go at the end of the list
    struct list_node* new_node = (struct list_node*)malloc(sizeof(struct list_node));
    new_node->value = num;
    new_node->tail = NULL;

    // If the list is empty, update the list pointer
    if (*nums == NULL) {
        *nums = new_node;
    } else {
        // Traverse the list until we get to the end.
        list current = *nums;
        while (current->tail != NULL) {
            current = current->tail;
        }
        // 'current' now points to the last 'tail' slot, where we need to put the pointer to the new node.
        current->tail = new_node;
    }
}

int main() {
    list numbers = NULL;

    // Append elements to the list
    append(&numbers, 1);
    append(&numbers, 2);
    append(&numbers, 3);

    printf("Length: %d\n", list_length(numbers));

    // Don't forget to free the memory when you are done with the list
    while (numbers != NULL) {
        list temp = numbers;
        numbers = numbers->tail;
        free(temp);
    }

    return 0;
}
